---
import { HTMLAttributes } from 'astro/type'
import { X as ClearIcon } from 'lucide-vue-next'

type Props = HTMLAttributes<'div'> & {
  blur?: boolean
}
const { class: className, blur, ...props } = Astro.props
---

<script>
import { debounce } from 'lodash-es'

/**
 * Represents an anchor within the search result content.
 */
interface Anchor {
  element: string
  id: string
  text: string
  location: number
}

/**
 * Represents a weighted location within the search result content.
 */
interface WeightedLocation {
  weight: number
  balanced_score: number
  location: number
}

/**
 * Represents a sub-result related to the main search result.
 */
interface SubResult {
  title: string
  url: string
  anchor: Anchor
  weighted_locations: WeightedLocation[]
  locations: number[]
  excerpt: string
}

/**
 * Represents a Pagefind search result.
 */
interface PagefindResult {
  url: string
  content: string
  word_count: number
  filters: Record<string, unknown>
  meta: {
    title: string
    [key: string]: unknown
  }
  anchors: Anchor[]
  weighted_locations: WeightedLocation[]
  locations: number[]
  raw_content: string
  raw_url: string
  excerpt: string
  sub_results: SubResult[]
}

class PagefindSearchInput extends HTMLElement {
  input = this.querySelector('input')!
  clearBtn = this.querySelector('button')!
  results: PagefindSearchResults = this.querySelector('pagefind-search-results')!
  mask: PagefindMask = this.querySelector('pagefind-mask')!

  connectedCallback() {
    this.input.addEventListener('keyup', (e) => {
      if (e.isComposing) {
        return
      }
      this.adjustResultsHeight()
      this.search(this.input.value)
      if (this.input.value.length) {
        this.clearBtn.classList.remove('hidden')
      }
      else {
        this.clearBtn.classList.add('hidden')
      }
    })

    this.input.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        this.results.clear()
        this.mask.hide()
        this.input.blur()
        e.preventDefault()
      }
    })

    this.input.addEventListener('focus', () => {
      this.adjustResultsHeight()
      this.search(this.input.value)
    })

    this.mask.addEventListener('click', () => {
      this.mask.hide()
      this.results?.clear()
    })

    this.clearBtn.addEventListener('mousedown', (e) => {
      this.input.value = ''
      this.mask?.hide()
      this.results?.clear()
      e.preventDefault()
    })

    // bind ctrl/command + f
    document.addEventListener('keydown', (event) => {
      if ((event.ctrlKey || event.metaKey) && event.key === 'f' && !event.shiftKey) {
        event.preventDefault()
        this.input.focus()
        this.mask.show()
      }
    })

    if (this.input.value.length) {
      this.search(this.input.value)
      this.clearBtn.classList.remove('hidden')
    }
  }

  search = debounce(async (text) => {
    if (!text.length) {
      return
    }
    // @ts-expect-error pagefind 定义在 window 上
    const searchResults = await pagefind.search(text)
    this.results.clear()
    if (searchResults.results.length) {
      this.mask?.show()
    }
    searchResults.results.forEach(async (res) => {
      this.results.push(await res.data())
    })
  }, 200)

  adjustResultsHeight() {
    const resultRect = this.results.getBoundingClientRect()
    const maxHeight = window.innerHeight - resultRect.top
    this.results.style.maxHeight = `${maxHeight}px`
  }
}

class PagefindSearchResultItem extends HTMLElement {
  constructor(result: PagefindResult) {
    super()
    const title = document.createElement('a')
    title.href = result.url
    title.classList.add('title')
    title.textContent = result.meta.title || 'Untitled'

    const excerpt = document.createElement('p')
    excerpt.classList.add('excerpt')
    excerpt.innerHTML = result.excerpt

    this.appendChild(title)
    this.appendChild(excerpt)
  }
}

class PagefindSearchResults extends HTMLElement {
  clear() {
    this.innerHTML = ''
  }

  push(result: PagefindResult) {
    const resultItem = new PagefindSearchResultItem(result)
    this.appendChild(resultItem)
  }
}

class PagefindMask extends HTMLElement {
  connectedCallback() {
    if (this.dataset.blur?.toLowerCase() === 'true') {
      this.classList.add('backdrop-blur-sm')
    }
  }

  show() {
    this.classList.remove('hidden')
  }

  hide() {
    this.classList.add('hidden')
  }
}

customElements.define('pagefind-mask', PagefindMask)
customElements.define('pagefind-search-input', PagefindSearchInput)
customElements.define('pagefind-search-result-item', PagefindSearchResultItem)
customElements.define('pagefind-search-results', PagefindSearchResults)
</script>

<script type="module">
if (!window.pagefind) {
  // eslint-disable-next-line antfu/no-top-level-await
  const pagefind = await import('/pagefind/pagefind.js')
  pagefind.init()
  window.pagefind = pagefind
}
</script>

<pagefind-search-input class:list={['input input-bordered flex w-full items-center relative z-10', className]} {...props}>
    <pagefind-mask class="hidden" data-blur={blur ? 'true' : 'false'} />
    <input type="text" class="grow" placeholder="🔍 搜索文章" />
    <button class="btn btn-circle btn-ghost btn-sm p-0 hidden" name="clear">
        <ClearIcon />
    </button>
    <pagefind-search-results />
</pagefind-search-input>

<style is:global>
pagefind-search-input {
    input, button {
        @apply z-10 bg-transparent;
    }

    pagefind-mask {
        @apply fixed inset-0 bg-black/50 z-10 transition-all;
    }

    pagefind-search-results {
        @apply absolute w-full top-full left-0 overflow-y-auto z-10 flex flex-col gap-2 mt-2;
    }

    pagefind-search-result-item {
        @apply card bg-base-100 shadow-xl p-4 flex flex-col gap-1;
        .title {
            @apply card-title text-lg underline break-all;
        }
        .excerpt {
            @apply text-base-content text-opacity-85 break-all;
        }
    }
}
</style>
