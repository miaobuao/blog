---
import { ChevronRight } from 'lucide-vue-next'
import type { ClassValue } from 'clsx'
import { Picture } from 'astro:assets'
import { marked } from 'marked'
import LinkButton from './ui/button.astro'
import { cn } from '@/theme/lib/utils'
import { type IPostInfo, extractBeforeMore, getTagLink } from '@/theme/lib/post'
import { formatDatetime } from '@/theme/lib/date'

export interface Props {
    info: IPostInfo
    className?: ClassValue
}

const { info, className } = Astro.props
const summary = extractBeforeMore(info.body)
const summaryHtml = marked(summary)
---

<div class:list={['flex relative rounded-box border border-base-300', className]}>
  <!-- cover -->
  {
    info.cover && (
      <a href={info.link} class="absolute w-full h-full top-0 left-0">
        <Picture
          {...info.cover}
          src={info.cover}
          alt="cover"
          loading="lazy"
          formats={['avif', 'webp']}
          width={Math.min(500, info.cover.width)}
          class="h-full w-full object-cover rounded-box"
        />
      </a>
    )
  }
  <div class:list={['flex w-full flex-col p-4 gap-2 md:p-6 md:gap-y-5 rounded-box bg-base-100/60 backdrop-blur-none']}>
      <a
        href={info.link}
        class={cn(
          'transition group hover:text-primary block font-semibold text-xl md:text-2xl w-full',
          'before:absolute before:bg-primary before:h-6 before:opacity-0 hover:before:opacity-100 before:left-[-0.1rem] before:rounded-md before:top-8 before:w-1',
          'dark:font-bold dark:active:text-[var(--title-active)]',
        )}
      >
        {info.title}
        <ChevronRight class="size-5 stroke-primary transition absolute group-hover:translate-x-1 translate-y-1.5 inline opacity-0 group-hover:opacity-100" />
      </a>

      <!-- tags -->
      <div class="flex items-center gap-x-2">
        {
          info.tags.map(tag => (
            <LinkButton
              className="p-0 h-full font-normal text-sm hover:text-primary"
              href={getTagLink(tag)}
            >
                <>#{tag}</>
            </LinkButton>
          ))
        }
      </div>

      <!-- summary -->
      {
        summary.length > 0 && (
          <article class="break-all prose prose-sm max-w-none" set:html={summaryHtml} />
        )
      }

      <!-- metadata -->
      <p class="text-sm font-mono break-keep whitespace-nowrap">
        {formatDatetime(info.ctime)}
        ·
        {`${info.reading.words} Words`}
        ·
        {info.reading.text}
      </p>
  </div>
</div>
