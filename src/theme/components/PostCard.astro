---
import { ChevronRight } from 'lucide-vue-next'
import type { ClassValue } from 'clsx'
import { Picture } from 'astro:assets'
import { marked } from 'marked'
import LinkButton from './ui/button.astro'
import { cn } from '@/theme/lib/utils'
import { type IPostInfo, extractBeforeMore, getTagLink } from '@/theme/lib/post'
import { formatDatetime } from '@/theme/lib/date'

export interface Props {
    info: IPostInfo
    className?: ClassValue
}

const { info, className } = Astro.props
const summary = extractBeforeMore(info.body)
const summaryHtml = marked(summary)
---

<!-- 小于md时显示 -->
<div
  class:list={[
    'md:hidden card bg-base-100 border border-base-300 shadow-sm',
    className,
  ]}
>
{
  info.cover && (
    <a href={info.link} class="bg-black rounded-t-box relative group">
        <Picture
          {...info.cover}
          src={info.cover}
          alt="cover"
          loading="lazy"
          width={Math.min(500, info.cover.width)}
          formats={['avif', 'webp']}
          class="w-full aspect-video object-cover rounded-t-box hover:opacity-50 hover:blur-sm transition-all"
        />
        <ChevronRight class="opacity-0 text-white group-hover:opacity-100 transition-all pointer-events-none absolute size-20 top-[50%] left-[50%] group-hover:translate-x-[-50%] translate-y-[-50%]" />
    </a>
  )
}
  <div class="card-body py-4 px-5 gap-2">
    <h2 class="card-title">
      <a
        href={info.link}
        class="transition group hover:text-primary text-xl md:text-2xl w-full dark:font-bold"
      >
        {info.title}
        <ChevronRight class="size-5  stroke-primary transition absolute group-hover:translate-x-1 translate-y-1 inline opacity-0 group-hover:opacity-100" />
      </a>
    </h2>

    <!-- tags -->
    <div class="flex items-center h-full gap-x-2 opacity-80">
        {
          info.tags.map(tag => (
            <LinkButton className="p-0 h-full font-normal text-sm hover:text-primary" href={getTagLink(tag)}>
              #{tag}
            </LinkButton>
          ))
        }
    </div>

    <!-- summary -->
    {
      summary.length > 0 && (
        <article class="break-all prose prose-sm max-w-none" set:html={summaryHtml} />
      )
    }

    <!-- metadata -->
    <p class="opacity-80 text-sm font-mono">
      {formatDatetime(info.ctime)}
      {' · '}
      {info.reading.words}
      {' '}
      Words ·
      {' '}
      {info.reading.text}
    </p>
  </div>
</div>

<!-- 大于md时显示 -->

<div class="md:flex hidden items-stretch bg-base-100 relative rounded-box border border-base-300">
    <div class:list={['flex flex-col pb-6 pt-7 px-8 gap-y-5', { 'basis-2/3': info.cover }]}>
      <a
        href={info.link}
        class={cn(
          'transition group hover:text-primary block font-semibold text-xl md:text-2xl w-full',
          'before:absolute before:bg-primary before:h-6 before:opacity-0 hover:before:opacity-100 before:left-[-0.1rem] before:rounded-md before:top-8 before:w-1',
          'dark:font-bold dark:active:text-[var(--title-active)]',
        )}
      >
        {info.title}
        <ChevronRight class="size-5 stroke-primary transition absolute group-hover:translate-x-1 translate-y-1.5 inline opacity-0 group-hover:opacity-100" />
      </a>

      <!-- tags -->
      <div class="flex items-center gap-x-2 opacity-80">
        {
          info.tags.map(tag => (
            <LinkButton
              className="p-0 h-full font-normal text-sm hover:text-primary"
              href={getTagLink(tag)}
            >
                <>#{tag}</>
            </LinkButton>
          ))
        }
      </div>

      <!-- summary -->
      {
        summary.length > 0 && (
          <article class="break-all prose prose-sm max-w-none" set:html={summaryHtml} />
        )
      }

      <!-- metadata -->
      <p class="opacity-80 text-sm font-mono break-keep whitespace-nowrap">
        {formatDatetime(info.ctime)}
        ·
        {`${info.reading.words} Words`}
        ·
        {info.reading.text}
      </p>
    </div>

    <!-- cover -->
     {
      info.cover && (
        <a href={info.link} class="relative group flex-1 h-full">
          <figure class="bg-black w-full h-full group-hover:scale-[0.9] transition-all rounded-r-box group-hover:rounded-2xl">
            <Picture
              {...info.cover}
              src={info.cover}
              alt="cover"
              loading="lazy"
              formats={['avif', 'webp']}
              width={Math.min(500, info.cover.width)}
              class="h-full w-full object-cover rounded-r-box hover:rounded-2xl hover:opacity-50 transition-all"
            />
          </figure>
          <ChevronRight class="opacity-0 text-white group-hover:opacity-100 transition-all pointer-events-none absolute size-20 top-[50%] left-[50%] group-hover:translate-x-[-50%] translate-y-[-50%]" />
        </a>
      )
     }
</div>
