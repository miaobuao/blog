---
import { ChevronRight } from 'lucide-vue-next'
import type { ClassValue } from 'clsx'
import { Picture } from 'astro:assets'
import { marked } from 'marked'
import LinkButton from './ui/button.astro'
import { type IPostInfo, extractBeforeMore, getTagLink } from '@/theme/lib/post'
import { formatDatetime } from '@/theme/lib/date'

export interface Props {
    info: IPostInfo
    className?: ClassValue
}

const { info, className } = Astro.props
const summary = extractBeforeMore(info.body)
const summaryHtml = marked(summary)
---

<div class:list={['flex relative rounded-box border border-base-300', className]}>
  <!-- cover -->
  {
    info.cover && (
      <a href={info.link} class="absolute w-full h-full top-0 left-0">
        <Picture
          {...info.cover}
          src={info.cover}
          alt="cover"
          loading="lazy"
          formats={['avif', 'webp']}
          width={Math.min(500, info.cover.width)}
          class="h-full w-full object-cover rounded-box"
        />
      </a>
    )
  }
  <div class:list={[
    'flex w-full flex-col p-4 gap-2 rounded-box bg-base-100/60 backdrop-blur-none',
    'md:(p-6 gap-y-5)',
  ]}
  >
      <a
        href={info.link}
        class:list={[
          'transition group block font-semibold text-xl relative',
          'md:text-2xl',
          'hover:(text-primary)',
          'dark:(font-bold)',
        ]}
      >
        <div
          class:list={[
            'transition bg-primary w-1 h-full rounded-md absolute -left-4 opacity-0',
            'md:(-left-6)',
            'group-hover:(opacity-100)',
          ]}
        ></div>
        {info.title}
        <ChevronRight class="size-5 stroke-primary transition absolute translate-y-1.5 md:translate-y-2 inline opacity-0 group-hover:(translate-x-1 opacity-100)" />
      </a>

      <!-- tags -->
      <div class="flex items-center gap-x-2">
        {
          info.tags.map(tag => (
            <LinkButton
              className="p-0 h-full font-normal text-sm hover:text-primary"
              href={getTagLink(tag)}
            >
                <>#{tag}</>
            </LinkButton>
          ))
        }
      </div>

      <!-- summary -->
      {
        summary.length > 0 && (
          <article class="break-all prose prose-sm max-w-none" set:html={summaryHtml} />
        )
      }

      <!-- metadata -->
      <p class="text-sm font-mono break-keep whitespace-nowrap">
        {formatDatetime(info.ctime)}
        ·
        {`${info.reading.words} Words`}
        ·
        {info.reading.text}
      </p>
  </div>
</div>
