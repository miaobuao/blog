---
import type { MarkdownHeading } from 'astro'
import type { HTMLAttributes } from 'astro/types'

type Props = HTMLAttributes<'ul'> & {
  headings: MarkdownHeading[]
}

const { headings, class: className, ...props } = Astro.props
---

<script>
class TocItem extends HTMLElement {
  get anchor() {
    return this.querySelector('a')
  }

  get relativeHeading() {
    return document.querySelector(`#${this.dataset.slug}`)
  }

  activate = () => {
    this.anchor?.classList.add('active')
  }

  deactivate = () => {
    this.anchor?.classList.remove('active')
  }
}

class ArticleToc extends HTMLElement {
  get items() {
    return Array.from(this.querySelectorAll('toc-item'))
  }

  get mainScroll() {
    return document.querySelector('#main-scroll')!
  }

  connectedCallback() {
    this.handleUpdate()
    this.mainScroll.addEventListener('scroll', this.handleUpdate)
  }

  disconnectedCallback() {
    this.mainScroll.removeEventListener('scroll', this.handleUpdate)
  }

  handleUpdate = () => {
    if (this.items.length === 0)
      return

    if (this.items.length === 1) {
      this.items[0].activate()
      return
    }

    const header = document.querySelector('header')
    const headerHeight = header?.getBoundingClientRect().height ?? 0
    const distance = headerHeight + 20
    const [top, ...others] = this.items
      .map(item => ({
        bbox: item.relativeHeading?.getBoundingClientRect(),
        item,
      }))
      .filter(({ bbox }) => !!bbox)
      .map(({ bbox, item }) => ({ distance: Math.abs(bbox!.top - distance), item }))
      .sort((a, b) => a.distance - b.distance)
    top.item.activate()
    others.forEach(({ item }) => item.deactivate())
  }
}

declare global {
  interface HTMLElementTagNameMap {
    'toc-item': TocItem
    'article-toc': ArticleToc
  }
}

customElements.define('toc-item', TocItem)
customElements.define('article-toc', ArticleToc)
</script>

<article-toc>
  <ul class:list={['menu flex flex-col gap-2 flex-nowrap', className]} {...props}>
    {
        headings.map(({ slug, text, depth }) => (
            <toc-item data-slug={slug}>
                <li>
                    <a href={`#${slug}`}>
                        <label style={{ paddingLeft: `${(depth - 1)}rem` }}>
                            {text}
                        </label>
                    </a>
                </li>
            </toc-item>
        ))
    }
  </ul>
</article-toc>
